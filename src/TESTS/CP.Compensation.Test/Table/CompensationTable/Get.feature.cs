// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CP.Compensation.Test.Table.CompensationTable
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CompensationCalculationService. GetForCompensations")]
    public partial class CompensationCalculationService_GetForCompensationsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Get.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CompensationCalculationService. GetForCompensations", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 2
#line 3
 testRunner.Given("Requestor is going to get compensation table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 4
 testRunner.And("Request time is configured to be 2018-05-02", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table1.AddRow(new string[] {
                        "USD"});
            table1.AddRow(new string[] {
                        "EUR"});
            table1.AddRow(new string[] {
                        "BYR"});
            table1.AddRow(new string[] {
                        "RUR"});
#line 5
 testRunner.And("Currencies are customized to have properties", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Currency",
                        "Ratio",
                        "Type",
                        "Date"});
            table2.AddRow(new string[] {
                        "USD",
                        "1.0",
                        "Daily",
                        "2018-05-02"});
            table2.AddRow(new string[] {
                        "BYR",
                        "2.0",
                        "Daily",
                        "2018-05-02"});
            table2.AddRow(new string[] {
                        "EUR",
                        "1.25",
                        "Daily",
                        "2018-05-02"});
#line 11
 testRunner.And("CurrencyRates are customized to have properties", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Currency",
                        "IsActive"});
            table3.AddRow(new string[] {
                        "LE BLR",
                        "BYR",
                        "true"});
            table3.AddRow(new string[] {
                        "LE USA",
                        "USD",
                        "true"});
            table3.AddRow(new string[] {
                        "LE RU",
                        "RUR",
                        "false"});
#line 16
 testRunner.And("LegalEntities are customized to have properties", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table4.AddRow(new string[] {
                        "Employee_1"});
#line 21
 testRunner.And("Employees are configured to have properties", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employee",
                        "LegalEntity",
                        "IsPrimary"});
            table5.AddRow(new string[] {
                        "Employee_1",
                        "LE USA",
                        "true"});
#line 24
 testRunner.And("Employees are customized to have legal entities", ((string)(null)), table5, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("All USD compensations")]
        public virtual void AllUSDCompensations()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All USD compensations", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line 2
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value",
                        "Currency",
                        "PromotionType",
                        "PromotionStatus",
                        "Employee",
                        "LegalEntity",
                        "ApplyDate",
                        "SalaryType",
                        "CreatedDate"});
            table6.AddRow(new string[] {
                        "Salary_1",
                        "100",
                        "USD",
                        "Salary",
                        "Approved",
                        "Employee_1",
                        "LE USA",
                        "2018-05-02",
                        "Monthly",
                        "2018-05-02"});
#line 29
 testRunner.Given("Salaries are customized to have properties", ((string)(null)), table6, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value",
                        "Currency",
                        "PromotionType",
                        "PromotionStatus",
                        "Employee",
                        "LegalEntity",
                        "ApplyDate"});
            table7.AddRow(new string[] {
                        "Bonus_1",
                        "300",
                        "USD",
                        "Bonus",
                        "Approved",
                        "Employee_1",
                        "LE USA",
                        "2018-04-02"});
#line 32
 testRunner.And("Bonuses are customized to have properties", ((string)(null)), table7, "And ");
#line 35
 testRunner.When("Compensation table is requested without parameters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employee",
                        "Period",
                        "Compensations",
                        "Total",
                        "Currency"});
            table8.AddRow(new string[] {
                        "Employee_1",
                        "2018-05-01",
                        "Salary_1",
                        "1200",
                        "USD"});
            table8.AddRow(new string[] {
                        "Employee_1",
                        "2018-04-01",
                        "Bonus_1",
                        "300",
                        "USD"});
#line 36
 testRunner.Then("Employees compensations should be", ((string)(null)), table8, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employee",
                        "Total",
                        "Currency"});
            table9.AddRow(new string[] {
                        "Employee_1",
                        "1500",
                        "USD"});
#line 40
 testRunner.And("Employees totals should be", ((string)(null)), table9, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiple currencies")]
        public virtual void MultipleCurrencies()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiple currencies", ((string[])(null)));
#line 44
this.ScenarioSetup(scenarioInfo);
#line 2
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value",
                        "Currency",
                        "PromotionType",
                        "PromotionStatus",
                        "Employee",
                        "LegalEntity",
                        "ApplyDate",
                        "SalaryType",
                        "CreatedDate"});
            table10.AddRow(new string[] {
                        "Salary_1",
                        "100",
                        "USD",
                        "Salary",
                        "Approved",
                        "Employee_1",
                        "LE USA",
                        "2018-05-02",
                        "Monthly",
                        "2018-05-02"});
            table10.AddRow(new string[] {
                        "Salary_2",
                        "100",
                        "BYR",
                        "Salary",
                        "Approved",
                        "Employee_1",
                        "LE USA",
                        "2018-04-02",
                        "Annual",
                        "2018-04-02"});
            table10.AddRow(new string[] {
                        "Salary_3",
                        "100",
                        "EUR",
                        "Salary",
                        "Approved",
                        "Employee_1",
                        "LE USA",
                        "2018-03-02",
                        "Annual",
                        "2018-03-02"});
#line 45
 testRunner.Given("Salaries are customized to have properties", ((string)(null)), table10, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value",
                        "Currency",
                        "PromotionType",
                        "PromotionStatus",
                        "Employee",
                        "LegalEntity",
                        "ApplyDate"});
            table11.AddRow(new string[] {
                        "Bonus_1",
                        "300",
                        "USD",
                        "Bonus",
                        "Approved",
                        "Employee_1",
                        "LE USA",
                        "2018-04-02"});
#line 50
 testRunner.And("Bonuses are customized to have properties", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Currency"});
            table12.AddRow(new string[] {
                        "USD"});
#line 53
 testRunner.When("Compensation table is requested with parameters", ((string)(null)), table12, "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employee",
                        "Period",
                        "Compensations",
                        "Total",
                        "Currency"});
            table13.AddRow(new string[] {
                        "Employee_1",
                        "2018-03-01",
                        "Salary_3",
                        "80",
                        "USD"});
            table13.AddRow(new string[] {
                        "Employee_1",
                        "2018-04-01",
                        "Salary_2,Bonus_1",
                        "350",
                        "USD"});
            table13.AddRow(new string[] {
                        "Employee_1",
                        "2018-05-01",
                        "Salary_1",
                        "1200",
                        "USD"});
#line 56
 testRunner.Then("Employees compensations should be", ((string)(null)), table13, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employee",
                        "Total",
                        "Currency"});
            table14.AddRow(new string[] {
                        "Employee_1",
                        "1630",
                        "USD"});
#line 61
 testRunner.And("Employees totals should be", ((string)(null)), table14, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
